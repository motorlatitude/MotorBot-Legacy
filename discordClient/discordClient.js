// Generated by CoffeeScript 1.10.0
(function() {
  var DiscordClient, EventEmitter, clientConnection, pjson, req, u, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  req = require('request');

  pjson = require('../package.json');

  u = require('./utils.coffee');

  utils = new u();

  clientConnection = require('./client/clientConnection.coffee');

  DiscordClient = (function(superClass) {
    extend(DiscordClient, superClass);

    function DiscordClient(options) {
      this.options = options;
      if (!this.options.token) {
        throw new Error("No Token Provided");
      }
    }

    DiscordClient.prototype.connect = function() {
      utils.debug("Starting MotorBot " + pjson.version, "info");
      this.internals = {};
      this.internals.servers = {};
      this.internals.voice = {};
      this.internals.sequence = 0;
      return this.getGateway();
    };

    DiscordClient.prototype.getGateway = function() {
      var self;
      self = this;
      utils.debug("Retrieving Discord Gateway Server");
      return req.get({
        url: "https://discordapp.com/api/gateway",
        json: true,
        time: true
      }, function(err, res, data) {
        var ping;
        if (res.statusCode !== 200 || err) {
          utils.debug("Error Occurred Obtaining Gateway Server: " + res.statusCode + " " + res.statusMessage, "error");
          return this.emit("disconnect");
        }
        ping = res.elapsedTime;
        utils.debug("Gateway Server: " + data.url + " (" + ping + "ms)");
        return self.establishGatewayConnection(data.url);
      });
    };

    DiscordClient.prototype.establishGatewayConnection = function(gateway) {
      var cc, self;
      self = this;
      this.internals.gateway = gateway;
      this.internals.token = this.options.token;
      cc = new clientConnection(this);
      return cc.connect(gateway);
    };

    DiscordClient.prototype.joinVoiceChannel = function(channel_id) {
      var channel, channelId, guildId, i, joinVoicePackage, len, ref, ref1, server, serverId;
      channelId = null;
      guildId = null;
      ref = this.internals.servers;
      for (serverId in ref) {
        server = ref[serverId];
        ref1 = server.channels;
        for (i = 0, len = ref1.length; i < len; i++) {
          channel = ref1[i];
          if (channel.id === channel_id && (channel.type = 2)) {
            channelId = channel.id;
            guildId = serverId;
            break;
          }
        }
      }
      if (channelId === null || guildId === null) {
        return utils.debug("Channel wasn't found or of incorrect type", "warn");
      }
      joinVoicePackage = {
        "op": 4,
        "d": {
          "guild_id": guildId,
          "channel_id": channelId,
          "self_mute": false,
          "self_deaf": false
        }
      };
      return this.gatewayWS.send(JSON.stringify(joinVoicePackage));
    };

    return DiscordClient;

  })(EventEmitter);

  module.exports = DiscordClient;

}).call(this);

//# sourceMappingURL=discordClient.js.map
