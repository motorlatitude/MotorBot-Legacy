// Generated by CoffeeScript 1.10.0
(function() {
  var Constants, UDPClient, VoiceConnection, u, utils, ws, zlib;

  u = require('../utils.coffee');

  utils = new u();

  Constants = require('./../constants.coffee');

  ws = require('ws');

  zlib = require('zlib');

  UDPClient = require('./udpClient');

  VoiceConnection = (function() {

    /*
     * PRIVATE METHODS
     */
    function VoiceConnection(discordClient) {
      this.discordClient = discordClient;
      utils.debug("New Voice Connection Started");
    }

    VoiceConnection.prototype.connect = function(params) {
      var self;
      this.token = params.token;
      this.guild_id = params.guild_id;
      this.endpoint = params.endpoint;
      this.user_id = this.discordClient.internals.user_id;
      this.session_id = this.discordClient.internals.session_id;
      this.vws = null;
      this.vhb = null;
      utils.debug("Generating new voice WebSocket connection");
      this.vws = new ws("wss://" + this.endpoint.split(":")[0]);
      self = this;
      this.vws.once('open', function() {
        return self.voiceGatewayOpen();
      });
      this.vws.once('close', function() {
        return self.voiceGatewayClose();
      });
      this.vws.once('error', function(err) {
        return self.voiceGatewayError(err);
      });
      return this.vws.on('message', function(msg, flags) {
        return self.voiceGatewayMessage(msg, flags);
      });
    };

    VoiceConnection.prototype.voiceGatewayOpen = function(guild_id) {
      var idpackage;
      utils.debug("Voice gateway server is open");
      idpackage = {
        "op": 0,
        "d": {
          "server_id": this.guild_id,
          "user_id": this.user_id,
          "session_id": this.session_id,
          "token": this.token
        }
      };
      return this.vws.send(JSON.stringify(idpackage));
    };

    VoiceConnection.prototype.voiceGatewayClose = function() {
      utils.debug("Voice gateway server is CLOSED", "warn");
      return clearInterval(this.vhb);
    };

    VoiceConnection.prototype.voiceGatewayError = function(err, guild_id) {
      return utils.debug("Voice gateway server encountered an error: " + err.toString(), "error");
    };

    VoiceConnection.prototype.voiceGatewayMessage = function(data, flags) {
      var msg;
      msg = flags.binary ? JSON.parse(zlib.inflateSync(data).toString()) : JSON.parse(data);
      switch (msg.op) {
        case Constants.voice.PacketCodes.READY:
          return this.handleReady(msg);
        case Constants.voice.PacketCodes.HEARTBEAT:
          return this.handleHeartbeat(msg);
        case Constants.voice.PacketCodes.SPEAKING:
          return this.handleSpeaking(msg);
        case Constants.voice.PacketCodes.SESSION_DESC:
          return this.handleSession(msg);
        default:
          return utils.debug("Unhandled Voice OP: " + msg.op, "warn");
      }
    };

    VoiceConnection.prototype.handleReady = function(msg) {
      var conn, self;
      self = this;
      this.vhb = setInterval(function() {
        var hbpackage;
        hbpackage = {
          "op": 3,
          "d": null
        };
        self.gatewayPing = new Date().getTime();
        return self.vws.send(JSON.stringify(hbpackage));
      }, msg.d.heartbeat_interval);
      conn = {
        "ssrc": msg.d.ssrc,
        "port": msg.d.port,
        "endpoint": this.endpoint.split(":")[0]
      };
      this.udpClient = new UDPClient();
      this.udpClient.init(conn);
      return this.udpClient.on('ready', function(localIP, localPort) {
        var selectProtocolPayload;
        selectProtocolPayload = {
          "op": 1,
          "d": {
            "protocol": "udp",
            "data": {
              "address": localIP,
              "port": parseInt(localPort),
              "mode": "xsalsa20_poly1305"
            }
          }
        };
        return self.vws.send(JSON.stringify(selectProtocolPayload));
      });
    };

    VoiceConnection.prototype.handleSpeaking = function(msg) {};

    VoiceConnection.prototype.handleHeartbeat = function(msg, guild_id) {
      var ping;
      ping = new Date().getTime() - this.gatewayPing;
      return utils.debug("Voice Heartbeat Sent (" + ping + "ms)");
    };

    VoiceConnection.prototype.handleSession = function(msg) {
      this.secretKey = msg.d.secret_key;
      this.mode = msg.d.mode;
      return utils.debug("Received Voice Session Description");
    };


    /*
     * PUBLIC FACING METHODS
     */

    return VoiceConnection;

  })();

  module.exports = VoiceConnection;

}).call(this);

//# sourceMappingURL=voiceConnection.js.map
