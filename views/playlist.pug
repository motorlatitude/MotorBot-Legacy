doctype html
html(lang="en")
  head
    title Motorbot Playlist
    link(type='image/png',rel='icon',href='motorbotIcon.png')
    link(href="https://fonts.googleapis.com/css?family=Open+Sans|Ubuntu",rel="stylesheet")
    link(href='/css/playlist.css',rel='stylesheet')
    link(href='/font-awesome-4.6.3/css/font-awesome.min.css',rel='stylesheet')
    script(src='/jquery-3.1.0.min.js')
    script.
      socket = null;
      hb = null;
      songDuration = 0;
      function sendHB(){
        socket.send(JSON.stringify({type:"hb",data:{}}));
      }

      function setUpWebSocketConnection(){
        socket = new WebSocket("wss://mb.lolstat.net:3211")
        socket.onopen = function (event){
          console.info("Connected to WS");
          hb = setInterval(sendHB,5000);
        }

        socket.onmessage = function (event){
          var data = JSON.parse(event.data)
          //console.log(data)
          if(data){
            if(data.type == "trackUpdate"){
              $(".playing").html(data.track);
              $(".trackPlaying").removeClass("trackPlaying");
              $(".play").parent().html($(".play").parent().attr('data-trackNo'));
              $("#"+data.trackId+" .item").html('<i class="fa fa-volume-up play" aria-hidden="true"></i>');
              $("#"+data.trackId).addClass("trackPlaying");
              songDuration = convertTimestampToSeconds(data.trackDuration);
            }
            else if(data.type == "playUpdate"){
              if(data.status == "stop"){
                $("#playStop").html('<i class="fa fa-play" aria-hidden="true" onclick="playMusic();" style="cursor: pointer;""></i>')
              }
              else if(data.status == "play"){
                $("#playStop").html('<i class="fa fa-stop" aria-hidden="true" onclick="stopMusic();" style="cursor: pointer;""></i>')
              }
            }
            else if(data.type == "trackAdd"){
              var trackNo = $("#playlist li").length;
              var formattedTimestamp = data.formattedTimestamp;
              var added = data.formattedDiff + " ago";
              $("#playlist").append("<li id='"+data._id+"'><div class='item' data-trackNo='"+trackNo+"'>"+trackNo+"</div><div class='title'>"+data.title+"</div><div class='videoId'><a href='https://www.youtube.com/watch?v="+data.videoId+"' target='_blank'><i class='fa fa-external-link' aria-hidden='true'></i> "+data.videoId+"</a></div><div class='time'>"+formattedTimestamp+"</div><div class='added'>"+added+"</div><div class='user'>"+data.userId+"</div></li>");
              $(".errorList ul").append("<li class='info'><div class='icon'><div class='iconWrapper'><i class='fa fa-play' aria-hidden='true'></i></div></div><div class='content'>Track Added: \""+data.title+"\"</div></li>");
              updateDblClicks();
            }
            else if(data.type == "trackDelete"){
              $("#"+data.trackId).remove();
              $("#playlist li").each(function(i){
                if(i>0 && !$(this).hasClass("trackPlaying")){
                  $(this).children('.item').html(i);
                }
              });
            }
            else if(data.type == "songTime"){
              var timeSpent = new Date(data.time).toISOString().substr(11, 8);
              var songTimelineDuration = new Date(songDuration*1000).toISOString().substr(11, 8)
              if(timeSpent.substr(0,3) == "00:"){
                timeSpent = timeSpent.substr(3,5);
              }
              if(songTimelineDuration.substr(0,3) == "00:"){
                songTimelineDuration = songTimelineDuration.substr(3,5);
              }
              $(".duration").html(timeSpent);
              $(".songDuration").html(songTimelineDuration);
              $(".timeline").css("width",((data.time/1000)/songDuration)*100+"%");
            }
            else{
            }
          }
        }

        socket.onclose = function (event){
          console.error("Websocket Closed...")
          $("#socketClose").css("display","block");
        }

        window.addEventListener('beforeunload', function(event) {
          clearInterval(hb);
          console.info("WebSocket About to Unload");
        });
      }

      $(document).ready(function(){
        document.oncontextmenu = function(){return false;};
        $(document).click(function(){
          $(".contextMenu").css("display","none")
        });
        setUpWebSocketConnection();
        loadPlaylist();
        $(".errorList ul li").each(function(index){
          $(this).click(function(){
            $(this).remove();
          });
        });
      });

      function updateDblClicks(){
        $(".errorList ul li").each(function(index){
          $(this).click(function(){
            $(this).remove();
          });
        });
        $("#playlist li").each(function(index){
          var self = $(this);
          self.dblclick(function(){
            $.ajax({
              url: '/api/playSong/'+self.attr('id'),
              dataType: 'json',
              success: function(d){
                console.log(d);
                $(".trackPlaying").removeClass("trackPlaying");
                $(".play").parent().html($(".play").parent().attr('data-trackNo'))
                self.children('.item').html('<i class="fa fa-volume-up play" aria-hidden="true"></i>');
                self.addClass('trackPlaying');
                songDuration = 0
              },
              error: function(err){
                console.log(err);
              }
            });
          });
          self.on('contextmenu', function(e){
            $(".contextMenu").css("display","none")
            if( e.button == 2 ) {
              CurX = (window.Event) ? e.pageX : event.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);
              CurY = (window.Event) ? e.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
              $(".contextMenu").html("<ul></ul>");
              $(".contextMenu").css("display","block").css("top",CurY+"px").css("left",CurX+"px");
              if($(this).attr("id")){
                $(".contextMenu ul").append("<li>Add to Queue</li><li class='sep'></li><li onclick=\"deleteSong('"+$(this).attr("id")+"')\">Remove This From Playlist</li>")
              }
              return false;
            }
            return true;
          });
        });
      }

      function deleteSong(trackId){
        $.ajax({
          url: '/api/deleteSong/'+trackId,
          dataType: 'json',
          success: function(data){
            console.log(data)
          },
          error: function(err){
            console.log(err);
          }
        });
      }

      function convertTimestamp(input){
        var reptms = /^PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?$/
        var hours = 0
        var minutes = 0
        var seconds = 0

        if(reptms.test(input)){
          matches = reptms.exec(input)
          if (matches[1]) hours = Number(matches[1])
          if (matches[2]) minutes = Number(matches[2])
          if (matches[3]) seconds = Number(matches[3])
          if (minutes < 10) minutes = "0"+minutes
          if (seconds < 10) seconds = "0"+seconds
        }
        if(hours == 0){
          return minutes+":"+seconds
        }
        else{
          return hours+":"+minutes+":"+seconds
        }
      }

      function convertTimestampToSeconds(input){
        var reptms = /^PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?$/
        var hours = 0
        var minutes = 0
        var seconds = 0

        if(reptms.test(input)){
          matches = reptms.exec(input)
          if (matches[1]) hours = Number(matches[1])
          if (matches[2]) minutes = Number(matches[2])
          if (matches[3]) seconds = Number(matches[3])
        }
        return hours*60*60+minutes*60+seconds;
      }

      function millisecondsToStr(milliseconds){
        var numberEnding = function (number){
          if(number > 1){return 's'}else{return ''}
        }
        var temp = Math.floor(milliseconds / 1000)
        var years = Math.floor(temp / 31536000)
        if(years){
          return years + ' year' + numberEnding(years)
        }
        var days = Math.floor((temp %= 31536000) / 86400)
        if(days){
          return days + ' day' + numberEnding(days)
        }
        var hours = Math.floor((temp %= 86400) / 3600)
        if(hours){
          return hours + ' hour' + numberEnding(hours)
        }
        var minutes = Math.floor((temp %= 3600) / 60)
        if(minutes){
          return minutes + ' minute' + numberEnding(minutes)
        }
        var seconds = temp % 60
        if(seconds){
          return seconds + ' second' + numberEnding(seconds)
        }
        return 'less than a second'
      }

      function loadPlaylist(){
        $.ajax({
          url: '/api/playlist',
          dataType: 'json',
          success: function(d){
            for(var i=0;i<d.length;i++){
              var data = d[i];
              var trackNo = i+1;
              var formattedTimestamp = convertTimestamp(data.duration);
              var added = millisecondsToStr(new Date().getTime() - data.timestamp) + " ago";
              var userId = data.userId || "";
              $("#playlist").append("<li id='"+data._id+"'><div class='item' data-trackNo='"+trackNo+"'>"+trackNo+"</div><div class='title'>"+data.title+"</div><div class='videoId'><a href='https://www.youtube.com/watch?v="+data.videoId+"' target='_blank'><i class='fa fa-external-link' aria-hidden='true'></i> "+data.videoId+"</a></div><div class='time'>"+formattedTimestamp+"</div><div class='added'>"+added+"</div><div class='user'>"+userId+"</div></li>");
            }
            updateDblClicks();
            loadPlaying();
          },
          error: function(err){
            console.log(err);
          }
        });
      }

      function loadPlaying(){
        $.ajax({
          url: '/api/playing',
          dataType: 'json',
          success: function(data){
            if(data._id){
              $(".playing").html(data.title);
              songDuration = convertTimestampToSeconds(data.duration)
              $(".trackPlaying").removeClass("trackPlaying");
              $(".play").parent().html($(".play").parent().attr('data-trackNo'));
              $("#"+data._id+" .item").html('<i class="fa fa-volume-up play" aria-hidden="true"></i>');
              $("#"+data._id).addClass("trackPlaying");
              $("#playStop").html('<i class="fa fa-stop" aria-hidden="true" onclick="stopMusic();" style="cursor: pointer;""></i>')
            }
          },
          error: function(err){
            console.log(err);
          }
        });
      }

      function playMusic(){
        $.ajax({
          url: '/api/playSong',
          dataType: 'json',
          success: function(d){
            //setTimeout(function(){window.location.reload()},2000);
          },
          error: function(err){
            console.log(err);
          }
        });
      }

      function stopMusic(){
        $.ajax({
          url: '/api/stopSong',
          dataType: 'json',
          success: function(d){
            //setTimeout(function(){window.location.reload()},2000);
          },
          error: function(err){
            console.log(err);
          }
        });
      }

      function prevMusic(){
        $.ajax({
          url: '/api/prevSong',
          dataType: 'json',
          success: function(d){
            //setTimeout(function(){window.location.reload()},2000);
          },
          error: function(err){
            console.log(err);
          }
        });
      }

      function skipMusic(){
        $.ajax({
          url: '/api/skipSong',
          dataType: 'json',
          success: function(d){
            //setTimeout(function(){window.location.reload()},2000);
          },
          error: function(err){
            console.log(err);
          }
        });
      }
  body
    .bodyWrapper
      //-.titleBar
      .sidebar
        img.motorbotIcon(src='/motorbotIcon.png')
      .contentView
        .header
          .playing Nothing Playing Currently
          .channel Not currently in a voice channel
          .playPlaylistButton <i class="fa fa-play" aria-hidden="true"></i> &nbsp; &nbsp;PLAY
        .errorList
          ul
            li.fatal#socketClose
              .icon
                .iconWrapper <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
              .content You've been disconnected from our server, please refresh the page!
        ul#playlist
          li.titleRow
            .item
            .title TITLE
            .videoId VIDEO
            .time TIME
            //.status Status
            .added ADDED
            .user USER

      .playerBar
        .controls
          .prev <i class="fa fa-step-backward" onclick='prevMusic();' style='cursor: pointer;' aria-hidden="true"></i>
          .playStopButton <span id="playStop"><i class="fa fa-play" aria-hidden="true" onclick='playMusic();' style='cursor: pointer;'></i></span>
          .skip <i class="fa fa-step-forward" onclick='skipMusic();' style='cursor: pointer;' aria-hidden="true"></i>
        .duration 00:00:00
        .timelineWrapper
          .timeline
        .songDuration 00:00:00
        .queue <i class="fa fa-bars" aria-hidden="true"></i>
      .contextMenu
        ul
